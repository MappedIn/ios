AppDelegate.swift
	public func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool
Path.swift
	func changePathsMap(current: Map?, next: Map)
	public let nodes: [Node]
	public let width: CGFloat
	public let elevation: CGFloat
	public let color: UIColor
	public lazy var hashValue: Int = {ObjectIdentifier(self).hashValue}()
	public init(nodes: [Node], width: CGFloat, elevation: CGFloat, color: UIColor)
	public func == (pathA: MapView.Path, pathB: MapView.Path) -> Bool
Directions.swift
	public let distance: Double!
	case Left
	case SlightLeft
	case Straight
	case SlightRight
	case Right
	case At
	case Past
	case Before
	public protocol Navigatable
	public protocol Navigatable
	public var navigatableNodes: [Node]
Vortex.swift
	public var accessible: Bool {return _accessible}
Node.swift
	public var navigatableNodes: [Node] {return [self]}
	public func == (nodeA: Node, nodeB: Node) -> Bool
Polygon.swift
	public var navigatableNodes: [Node] {return entrances}
	public var hashValue: Int = 0
	public func == (polygonA: Polygon, polygonB: Polygon) -> Bool
MapView.swift
	@objc public enum MotionType:Int
	public var camera: MapViewCamera!
	required public init(coder aDecoder: NSCoder)
	public func renderer(renderer: SCNSceneRenderer, willRenderScene scene: SCNScene, atTime time: NSTimeInterval)
MapViewCamera.swift
	public enum AutomaticZoomType {case None, In, Out, Both}
	public func focusOn(nodes: [Node], autoZoom: AutomaticZoomType = .Both)
Location.swift
	public var navigatableNodes: [Node]
MapViewMarker.swift
	public func == (markerA: MapViewMarker, markerB: MapViewMarker) -> Bool
MapViewMarker2D.swift
	override public var hidden:Bool
Map.swift
	public var hashValue: Int = 0
	public func == (mapA: Map, mapB: Map) -> Bool
