// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import SceneKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIApplication;
@class NSObject;


/// MappedIn App Delegate. Your app delegate must inherit from this base class.
SWIFT_CLASS("_TtC8MappedIn11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
- (BOOL)application:(UIApplication * __nonnull)application didFinishLaunchingWithOptions:(NSDictionary * __nullable)launchOptions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class NSCoder;
@protocol SCNSceneRenderer;
@class SCNScene;


/// MapView is a custom view designed to handle displaying Maps for a Venue. Set the venue property and then call loadScene() to display the first map. From there, you can change maps (usually different floors) with the .setFloor() function, and can draw a path from one node to another with drawPath()
SWIFT_CLASS("_TtC8MappedIn7MapView")
@interface MapView : UIView <SCNSceneRendererDelegate>

/// The base path will be drawn with this colour.
@property (nonatomic, strong) UIColor * __nonnull pathColor;

/// The arrow on the path will be drawn with this colour.
@property (nonatomic, strong) UIColor * __nonnull pathArrowColor;
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadScene;

/// Changes the MapView to display another map associated with the current venue. Typically used to go up and down floors.
///
/// This will also draw any part of the current path (if it exists) that falls onto the new map.
///
/// \param index The index of the map to display. Map order is currently undefined, but will be sorted (likely by elevation) in the future.
- (void)changeMap:(NSInteger)index;
- (void)clearHighlightedPolygons;
- (void)renderer:(id <SCNSceneRenderer> __nonnull)renderer willRenderScene:(SCNScene * __nonnull)scene atTime:(NSTimeInterval)time;
@end


@interface MapView (SWIFT_EXTENSION(MappedIn))

/// Clears all paths currently drawn on the MapView. Also optionally forgets the current path so they won't get redrawn later.
///
/// Used automatically on map transitions to wipe the path before drawing any newly-visible nodes on the new map.
/// You may also want to use it to temporarly clear the current path, or if the user is done navigating.
///
/// \param forgetCurrentPath Defaults to true. Forgets current path so it won't be re-drawn later.
- (void)clearPaths:(BOOL)forgetCurrentPath;

/// Redraws the current path. Useful if you've cleared the map for some reason. This is automatically called on a floor change.
- (void)drawCurrentPath;

/// Removes the highlight effect from all nodes
- (void)removeHighlightNode;
@end

typedef SWIFT_ENUM(NSInteger, MotionType) {
  MotionTypeZooming = 0,
  MotionTypePanning = 1,
  MotionTypeRotating = 2,
  MotionTypeMulti = 3,
};


@interface NSHTTPURLResponse (SWIFT_EXTENSION(MappedIn))
@end


@interface UIView (SWIFT_EXTENSION(MappedIn))
@end

#pragma clang diagnostic pop
